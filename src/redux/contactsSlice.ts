// src/redux/contactsSlice.ts
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { Contact } from '../types/Contact';

/**
 * Interface representing the state of the contacts slice.
 * @interface ContactsState
 * @property {Contact[]} contacts - An array of contacts.
 */
interface ContactsState {
  contacts: Contact[];
}

/**
 * The initial state of the contacts slice.
 * @constant {ContactsState} initialState
 * @property {Contact[]} contacts - An array of contacts fetched from local storage or an empty array.
 */
const initialState: ContactsState = {
  contacts: JSON.parse(localStorage.getItem('contacts') || '[]'),
};

/**
 * The contacts slice created using the `createSlice` function from Redux Toolkit.
 * @constant {Slice} contactsSlice
 * @property {string} name - The name of the slice.
 * @property {ContactsState} initialState - The initial state of the slice.
 * @property {Object} reducers - An object containing the reducer functions.
 */
const contactsSlice = createSlice({
  name: 'contacts',
  initialState,
  reducers: {
    /**
     * Reducer function to add a new contact to the contacts array.
     * @function addContact
     * @param {ContactsState} state - The current state of the contacts slice.
     * @param {PayloadAction<Omit<Contact, 'id'>>} action - The action object containing the new contact data.
     */
    addContact: (state, action: PayloadAction<Omit<Contact, 'id'>>) => {
      const newContact: Contact = {
        id: Date.now().toString(),
        ...action.payload,
      };
      state.contacts.push(newContact);
      localStorage.setItem('contacts', JSON.stringify(state.contacts));
    },
    /**
     * Reducer function to remove a contact from the contacts array.
     * @function removeContact
     * @param {ContactsState} state - The current state of the contacts slice.
     * @param {PayloadAction<string>} action - The action object containing the ID of the contact to remove.
     */
    removeContact: (state, action: PayloadAction<string>) => {
      state.contacts = state.contacts.filter((contact) => contact.id !== action.payload);
      localStorage.setItem('contacts', JSON.stringify(state.contacts));
    },
    /**
     * Reducer function to update a contact in the contacts array.
     * @function updateContact
     * @param {ContactsState} state - The current state of the contacts slice.
     * @param {PayloadAction<Contact>} action - The action object containing the updated contact data.
     */
    updateContact: (state, action: PayloadAction<Contact>) => {
      const index = state.contacts.findIndex((contact) => contact.id === action.payload.id);
      if (index !== -1) {
        state.contacts[index] = action.payload;
        localStorage.setItem('contacts', JSON.stringify(state.contacts));
      }
    },
  },
});

/**
 * Action creators generated by the `createSlice` function.
 * @constant {Object} actions
 * @property {Function} addContact - Action creator for adding a new contact.
 * @property {Function} removeContact - Action creator for removing a contact.
 * @property {Function} updateContact - Action creator for updating a contact.
 */
export const { addContact, removeContact, updateContact } = contactsSlice.actions;

/**
 * The reducer function of the contacts slice.
 * @constant {Reducer} reducer
 */
export default contactsSlice.reducer;